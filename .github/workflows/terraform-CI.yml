---
name: 'Terraform CI'

on:  # yamllint disable-line rule:truthy
  pull_request:

permissions:
  id-token: write  # This is required for requesting the JWT
  contents: read
  pull-requests: write

concurrency:
  group: terraform
  cancel-in-progress: false

env:
  ROLE_ARN: "arn:aws:iam::493370826424:role/ih-tf-infrahouse-website-infra-github"
  STATE_MGR_ROLE_ARN: "arn:aws:iam::289256138624:role/ih-tf-infrahouse-website-infra-state-manager"

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    environment: continuous-integration
    timeout-minutes: 10
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: github-action-ci
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Set Terraform version
        id: "terraform_version"
        run: echo "IH_TF_VERSION=$(cat .terraform-version)" >> "$GITHUB_OUTPUT"

      # Install the $IH_TF_VERSION version of Terraform CLI
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ steps.terraform_version.outputs.IH_TF_VERSION }}

      # Prepare Python environment
      - name: Setup Python Environment
        run: make bootstrap-ci

      # Run all required linters
      - name: Code Style Check
        run: make lint

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state,
      # downloading modules, etc.
      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: |
          make plan
          ih-plan publish ${{ github.repository }} ${{ github.event.pull_request.number }} plan.stdout plan.stderr

      # Upload Terraform Plan
      - name: Upload Terraform Plan
        run: |
          ih-plan \
            --aws-assume-role-arn "$STATE_MGR_ROLE_ARN" \
            upload \
            --key-name=plans/${{ github.event.pull_request.number }}.plan \
            tf.plan
